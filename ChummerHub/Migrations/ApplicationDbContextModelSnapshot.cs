// <auto-generated />
using System;
using ChummerHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChummerHub.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ChummerHub.Data.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MyRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ChummerHub.Data.ApplicationUserFavoriteGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FavoriteGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FavoriteGuid");

                    b.ToTable("ApplicationUserFavoriteGroup", (string)null);
                });

            modelBuilder.Entity("ChummerHub.Models.V1.SINner", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditionNumber")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("GoogleDriveFileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Language")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDownload")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MyGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SINnerMetaDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UploadClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UploadDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Alias");

                    b.HasIndex("EditionNumber");

                    b.HasIndex("Hash");

                    b.HasIndex("MyGroupId");

                    b.HasIndex("SINnerMetaDataId");

                    b.ToTable("SINners", (string)null);
                });

            modelBuilder.Entity("ChummerHub.Models.V1.SINnerComment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Downloads")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SINnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("SINnerComments", (string)null);
                });

            modelBuilder.Entity("ChummerHub.Models.V1.SINnerGroup", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupCreatorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Groupname")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Hash")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("MyAdminIdentityRole")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid?>("MyParentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MySettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Groupname");

                    b.HasIndex("Hash");

                    b.HasIndex("Language");

                    b.HasIndex("MyParentGroupId");

                    b.HasIndex("MySettingsId");

                    b.ToTable("SINnerGroups", (string)null);
                });

            modelBuilder.Entity("ChummerHub.Models.V1.SINnerGroupSetting", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleDriveFileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MyGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UploadDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SINnerGroupSettings", (string)null);
                });

            modelBuilder.Entity("ChummerHub.Models.V1.SINnerMetaData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VisibilityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VisibilityId");

                    b.ToTable("SINnerMetaData", (string)null);
                });

            modelBuilder.Entity("ChummerHub.Models.V1.SINnerUserRight", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<string>("EMail")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid?>("SINnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SINnerVisibilityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EMail");

                    b.HasIndex("SINnerId");

                    b.HasIndex("SINnerVisibilityId");

                    b.ToTable("UserRights", (string)null);
                });

            modelBuilder.Entity("ChummerHub.Models.V1.SINnerVisibility", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsGroupVisible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SINnerVisibility", (string)null);
                });

            modelBuilder.Entity("ChummerHub.Models.V1.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsUserGenerated")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentTagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SINnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SINnerMetaDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagComment")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("TagType")
                        .HasColumnType("int");

                    b.Property<string>("TagValue")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<float?>("TagValueFloat")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SINnerId");

                    b.HasIndex("SINnerMetaDataId");

                    b.HasIndex("TagId");

                    b.HasIndex("TagValueFloat");

                    b.HasIndex("TagName", "TagValue");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("ChummerHub.Models.V1.UploadClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChummerVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InstallationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UploadClients", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Groupname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ChummerHub.Data.ApplicationUserFavoriteGroup", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.ApplicationUser", null)
                        .WithMany("FavoriteGroups")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("ChummerHub.Models.V1.SINner", b =>
                {
                    b.HasOne("ChummerHub.Models.V1.SINnerGroup", "MyGroup")
                        .WithMany()
                        .HasForeignKey("MyGroupId");

                    b.HasOne("ChummerHub.Models.V1.SINnerMetaData", "SINnerMetaData")
                        .WithMany()
                        .HasForeignKey("SINnerMetaDataId");

                    b.Navigation("MyGroup");

                    b.Navigation("SINnerMetaData");
                });

            modelBuilder.Entity("ChummerHub.Models.V1.SINnerGroup", b =>
                {
                    b.HasOne("ChummerHub.Models.V1.SINnerGroup", "MyParentGroup")
                        .WithMany("MyGroups")
                        .HasForeignKey("MyParentGroupId");

                    b.HasOne("ChummerHub.Models.V1.SINnerGroupSetting", "MySettings")
                        .WithMany()
                        .HasForeignKey("MySettingsId");

                    b.Navigation("MyParentGroup");

                    b.Navigation("MySettings");
                });

            modelBuilder.Entity("ChummerHub.Models.V1.SINnerMetaData", b =>
                {
                    b.HasOne("ChummerHub.Models.V1.SINnerVisibility", "Visibility")
                        .WithMany()
                        .HasForeignKey("VisibilityId");

                    b.Navigation("Visibility");
                });

            modelBuilder.Entity("ChummerHub.Models.V1.SINnerUserRight", b =>
                {
                    b.HasOne("ChummerHub.Models.V1.SINnerVisibility", null)
                        .WithMany("UserRights")
                        .HasForeignKey("SINnerVisibilityId");
                });

            modelBuilder.Entity("ChummerHub.Models.V1.Tag", b =>
                {
                    b.HasOne("ChummerHub.Models.V1.SINnerMetaData", null)
                        .WithMany("Tags")
                        .HasForeignKey("SINnerMetaDataId");

                    b.HasOne("ChummerHub.Models.V1.Tag", null)
                        .WithMany("Tags")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ChummerHub.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ChummerHub.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChummerHub.Models.V1.SINnerGroup", b =>
                {
                    b.Navigation("MyGroups");
                });

            modelBuilder.Entity("ChummerHub.Models.V1.SINnerMetaData", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ChummerHub.Models.V1.SINnerVisibility", b =>
                {
                    b.Navigation("UserRights");
                });

            modelBuilder.Entity("ChummerHub.Models.V1.Tag", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.ApplicationUser", b =>
                {
                    b.Navigation("FavoriteGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
